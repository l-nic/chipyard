from scapy.all import *
from LNIC_headers import LNIC
import time
import argparse

UPSTREAM_COLLECTOR_PORT = 0x1111

class TelemetryReport_v1(Packet):
    name = "INT telemetry report v1.0"
    # default value a for telemetry report with INT
    fields_desc = [
        BitField("ver" , 1 , 4),
        BitField("len" , 1 , 4),
        BitField("nProto", 0, 3),
        BitField("repMdBits", 0, 6),
        BitField("reserved", 0, 6),
        BitField("d", 0, 1),
        BitField("q", 0, 1),
        BitField("f", 1, 1),
        BitField("hw_id", 0, 6),

        IntField("swid", 0),
        IntField("seqNumber", 0),
        IntField("ingressTimestamp", 0)
    ]

class INT_v1(Packet):
    name = "INT v1.0"
    fields_desc = [
        ByteField("type", 1),
        ByteField("shimRsvd1", 0),
        ByteField("length", 0),
        BitField("dscp", 0, 6),
        BitField("shimRsvd2", 0, 2),

        BitField("ver", 0, 4),
        BitField("rep", 0, 2),
        BitField("c", 0, 1),
        BitField("e", 0, 1),
        BitField("m", 0, 1),
        BitField("rsvd1", 0, 7),
        BitField("rsvd2", 0, 3),
        BitField("hopMLen", 1, 5),
        ByteField("remainHopCnt", 0),

        XShortField("ins", 0),
        ShortField("res", 0),

        FieldListField("INTMetadata", [], XIntField("", None), count_from=lambda p:(p.length-3)/p.hopMLen)
    ]

class INT_opt(Packet):
    name = "INT Optimized"
    fields_desc = [
        ByteField("type", 1),
        ByteField("shimRsvd1", 0),
        ByteField("length", 0),
        BitField("dscp", 0, 6),
        BitField("shimRsvd2", 0, 2),

        BitField("ver", 0, 4),
        BitField("rep", 0, 2),
        BitField("c", 0, 1),
        BitField("e", 0, 1),
        BitField("m", 0, 1),
        BitField("rsvd1", 0, 7),
        BitField("rsvd2", 0, 3),
        BitField("hopMLen", 1, 5),
        ByteField("remainHopCnt", 0),

        XShortField("ins", 0),
        ShortField("res", 0),

        FieldListField("INTMetadata", [], XLongField("", None), count_from=lambda p:(p.length-3)/p.hopMLen)
    ]

class Padding(Packet):
    name = "Padding"
    fields_desc = [
        ShortField("pad", 0)
    ]

"""These are the messages generated by the collector when a network event is detected.
"""
class NetworkEvent(Packet):
    name = "NetworkEvent"
    fields_desc = [
        # word 1
        BitField("pad0", 0, 56),
        ByteEnumField("event_type", 0, {0:"PATH",
                                        1:"PATH_LATENCY",
                                        2:"HOP_LATENCY",
                                        3:"QSIZE",
                                        4:"LINK_UTIL"}),
        # word 2
        LongField("report_timestamp", 0)
    ]

class PathEvent(Packet):
    name = "PathEvent"
    fields_desc = [
        # word 1
        IPField("src_ip", "0.0.0.0"),
        IPField("dst_ip", "0.0.0.0"),
        # word 2
        ShortField("src_port", 0),
        ShortField("dst_port", 0),
        IntField("num_hops", 0),
        # additional words
        FieldListField("switch_ids", [], LongField("", 0), count_from=lambda p:p.num_hops)
    ]
bind_layers(NetworkEvent, PathEvent, event_type=0)

class PathLatencyEvent(Packet):
    name = "PathLatencyEvent"
    fields_desc = [
        # word 1
        IPField("src_ip", "0.0.0.0"),
        IPField("dst_ip", "0.0.0.0"),
        # word 2
        ShortField("src_port", 0),
        ShortField("dst_port", 0),
        IntField("pad", 0),
        # word 3
        LongField("path_latency", 0)
    ]
bind_layers(NetworkEvent, PathLatencyEvent, event_type=1)

class HopLatencyEvent(Packet):
    name = "HopLatencyEvent"
    fields_desc = [
        # word 1
        IPField("src_ip", "0.0.0.0"),
        IPField("dst_ip", "0.0.0.0"),
        # word 2
        ShortField("src_port", 0),
        ShortField("dst_port", 0),
        IntField("switch_id", 0),
        # word 3
        LongField("hop_latency", 0)
    ]
bind_layers(NetworkEvent, HopLatencyEvent, event_type=2)

class QueueSizeEvent(Packet):
    name = "QueueSizeEvent"
    fields_desc = [
        # word 1
        IntField("switch_id", 0),
        IntField("q_id", 0),
        # word 2
        LongField("q_size", 0)
    ]
bind_layers(NetworkEvent, QueueSizeEvent, event_type=3)

class LinkUtilEvent(Packet):
    name = "LinkUtilEvent"
    fields_desc = [
        # word 1
        IntField("switch_id", 0),
        IntField("egress_ID", 0),
        # word 2
        LongField("link_utilization", 0)
    ]
bind_layers(NetworkEvent, LinkUtilEvent, event_type=4)


# ------------- INT Heavy Hitter Prevention Use Case -------------

class INT_HH_report(Packet):
    name = "INT_HH_report"
    fields_desc = [
        # word 1
        IPField("src_ip", "0.0.0.0"),
        IPField("dst_ip", "0.0.0.0"),
        # word 2
        ShortField("src_port", 0),
        ShortField("dst_port", 0),
        IntField("proto", 0),
        # word 3
        BitField("unused", 0, 56),
        FlagsField("flow_flags", 0, 8, ["DATA", "START", "FIN", "R0", "R1", "R2", "R3", "R4"]),
        # word 4
        LongField("report_timestamp", 0), # ns
        # word 5
        LongField("pkt_len", 0),
        # word 6
        LongField("ingress_switch_ip", 0),
        # word 7
        LongField("nic_timestamp", 0)
    ]

class HH_header(Packet):
    name = "HH_header"
    fields_desc = [
        LongField("msg_type", 0)
    ]

class HH_event(Packet):
    name = "HH_event"
    fields_desc = [
        # word 1
        IPField("src_ip", "0.0.0.0"),
        IPField("dst_ip", "0.0.0.0"),
        # word 2
        ShortField("src_port", 0),
        ShortField("dst_port", 0),
        IntField("proto", 0),
        # word 3
        IntField("timestamp", 0),
        IntField("latency", 0)
    ]
bind_layers(HH_header, HH_event, msg_type=0)

# ----------------------------------------------------------------

class DoneMsg(Packet):
    name = "DoneMsg"
    fields_desc = [
        IntField("timestamp", 0),
        IntField("latency", 0)
    ]
bind_layers(HH_header, DoneMsg, msg_type=1)

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='INT Telemetry Report pkt gen.')
    parser.add_argument("-t1", "--test_v10_spec", action='store_true',
        help="Test v1.0 spec implementation")
    args = parser.parse_args()

    # test v1.0 spec impelementation
    if args.test_v10_spec:
        p = Ether()/ \
            IP(tos=0x17<<2)/ \
            LNIC(flags='DATA', src_context=5000, dst_context=54321)/ \
            Padding()/ \
            TelemetryReport_v1(ingressTimestamp= 1524138290)/ \
            Ether()/ \
            IP(src="10.0.0.1", dst="10.0.0.2")/ \
            UDP(sport=5000, dport=5000)/ \
            INT_v1(length=123, hopMLen=8, remainHopCnt=0, ins=(1<<7|1<<6|1<<5|1<<4|1<<3|1<<2|1<<1|1)<<8,
                INTMetadata= [5, 2<<16| 3, 400, 5<<16| 600, 700, 1524234560, 5<<16| 1000, 1,
                              4, 2<<16| 3, 4, 5<<16| 6, 7, 1524234560, 5<<16| 10, 1,
                              3, 2<<16| 3, 4, 5<<16| 6, 7, 1524234560, 5<<16| 10, 1,
                              2, 2<<16| 3, 4, 5<<16| 6, 7, 1524234560, 5<<16| 10, 1,
                              1, 2<<16| 3, 4, 5<<16| 6, 7, 1524234560, 5<<16| 10, 1,
                              0, 2<<16| 3, 4, 5<<16| 6, 7, 1524234560, 5<<16| 10, 1]
            )

        p[LNIC].msg_len = len(p) - len(Ether()/IP()/LNIC())

        p.show()
        print '------------------------'
        print 'len(p) = {} bytes'.format(len(p))
        print '------------------------'
        hexdump(p)


